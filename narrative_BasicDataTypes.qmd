---
title: "Basic Data Types"
format: 
  html:
    toc: true
---

![Photo by <a href="https://unsplash.com/@matt_j_cand?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Matt J_Cand</a> on <a href="https://unsplash.com/t/wallpapers?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>](https://unsplash.com/photos/qP54ziIya4k/download?ixid=MnwxMjA3fDB8MXx0b3BpY3x8Ym84alFLVGFFMFl8fHx8fDJ8fDE2NjIwNTI2Nzk&force=true&w=1920)

```{r}
#| eval: false
remotes::install_github("hadley/emo")
```

```{r}
#| echo: false
library(emo)
```

## Missing Data

> The Absence of Data

The most fundamental type of data in `R` is data that does not exist! Missing data! It is represented as `NA`

```{r}
x <- NA
```

and can be in

## Numerical Data

> Numerical data contains all numerical represenations.

By far, the most common kind of data we use in our analyses is numerical data. This may represent measured things like `height`, `snout-vent length` (whatever that is), `depth`, `age`, etc. In data analysis, we commonly take (or obtain) measurements from several items and then try to characterize them using summaries and visualization.

In `R`, the numerical data type can be defined as:

```{r}
X <- 42
```

Notice how the numerical value of `42` is assigned to the variable named `X`. To have `R` print out the value of a particular variable, you can type its name in the console and it will give it to you.

```{r}
X
```

### Operators

Numeric types have a ton of normal operators that can be used. Some examples include:

The usual *arithmatic operators*:

```{r}
x <- 10
y <- 23

x + y
x - y
x * y
x / y
```

You have the *exponentials*:

```{r}
## x raised to the y
x^y

## the inverse of an exponent is a root, here is the 23rd root of 10
x^(1/y)
```

The *logrithmics*:

```{r}
## the natural log
log(x)

## Base 10 log
log(x,base=10)
```

And the *modulus operator*:

```{r}
y %% x
```

If you didn't know what this one is, don't worry. The modulus is just the *remainder after division* like you did in grade school. The above code means that *23 divided by 10 has a remainder of 3*. I include it here just to highlight the fact that many of the operators that we will be working with in `R` are created by more than just a single symbol residing at the top row of your computer keyboard. There are just too few symbos on the normal keyboard to represent the breath of operators. The authors of `R` have decided that using combinations of symbols to handle these and you will get used to them in not time at all.

### Introspection & Coercion

The `class()` of a numeric type is (wait for it)... `numeric` (those `R` programmers are sure clever).

```{r}
class( 42 )
```

::: box-yellow
In this case `class` is the name of the function and there are one or more things we pass to that function. These **must** be enclosed in the parenthesis associated with `class`. The parantheses **must** be *right next to* the name of the function. If you put a space betwen the word `class` and the parentheses, it may not work the way you would like it to. You've been warned.

The stuff inside the parenthesis are called *arguments* and are the data that we pass to the function itself. In this case we pass a value or varible to the `class` function and it does its magic and tells us what kind of data type it is. Many functions have several arguements that can be passed to them, some optional, some not. We will get more into that on the lecture covering [Functions](https://dyerlab.github.io/ENVS-Lectures/functions/slides.html).
:::

It is also possible to inquire if a particular variable is of a certain class. This is done by using the `is.*` set of functions.

```{r}
is.numeric( 42 )
is.numeric( "dr dyer" )
```

Sometimes we may need to turn one kind of class into another kind. Consider the following:

```{r}
x <- "42"
is.numeric( x )
class(x)
```

It is a `character` data type because it is enclosed within a set of quotes. However, we can *coerce* it into a numeric type by:

```{r}
y <- as.numeric( x )
is.numeric( y )
y
```

## Character Data

> Character data represents textual content.

The data type `character` is intended to represent textual data such as *actual texts*, names of objects, and other contnet that is intended to help both you and the audience you are trying to reach better understand your data.

```{r}
name <- "Dyer"
sport <- "Frolf"
```

The two variables above have a sequence of characters enclosed by a double quote. You can use a single quote instead, *however* the enclosing quoting characters must be the same (e.g., you cannot start with a single quote and end with a double).

### Lengths

The length of a string is a measure of how many varibles there are, not the number of characters within it. For example, the length of `dyer` is

```{r}
length(name)
```

because it only has one character but the number of characters within it is:

```{r}
nchar(name)
```

Length is defined specifically on the number of elements in a vector, and technically the variable `dyer` is a vector of length one. If we concatinate them into a vector (go see the vector content)

```{r}
phrase <- c( name, sport )
```

we find that it has a length of 2

```{r}
length(phrase)
```

And if we ask the vector how many characters are in the elements it contains, it gives us a vector of numeric types representing the number of letters in each of the elements.

```{r}
nchar(phrase)
```

### Putting Character Objects Together

The binary `+` operator has not been defined for objects of class `character`, which is understandable once we consider all the different ways we may want to put the values contained in the variables together. If you try it, `R` will complain.

```{r, error=TRUE}
name + sport
```

The `paste()` function is designed to take a collection of `character` variables and smush them togethers. By default, it inserts a space between each of the variables and/or values passed to it.

```{r}
paste( name, "plays", sport )
```

Although, you can have any kind of separator you like:

```{r}
paste(name, sport, sep=" is no good at ")
```

The elements you pass to `paste()` do not need to be held in variables, you can put quoted `character` values in there as well.

```{r}
paste( name, " the ", sport, "er", sep="") 
```

If you have a vector of `character` types, by default, it considers the pasting operation to be applied to every element of the vector.

```{r}
paste( phrase , "!")
```

However if you intention is to take the elements of the vector and paste them together, then you need to specify that using the `collapse` optional argument. By default, it is set to `NULL`, and that state tells the function to apply the paste()-ing to each element. However, if you set `collapse` to something other than `NULL`, it will use that to take all the elements and put them into a single response.

```{r}
paste( phrase, collapse = " is not good at ") 
```

### String Operations

Many times, we need to extract components from within a longer `character` element. Here is a longer bit of text as an example.

```{r}
corpus <- "An environmental impact statement (EIS), under United States environmental law, is a document required by the 1969 National Environmental Policy Act (NEPA) for certain actions 'significantly affecting the quality of the human environment'.[1] An EIS is a tool for decision making. It describes the positive and negative environmental effects of a proposed action, and it usually also lists one or more alternative actions that may be chosen instead of the action described in the EIS. Several U.S. state governments require that a document similar to an EIS be submitted to the state for certain actions. For example, in California, an Environmental Impact Report (EIR) must be submitted to the state for certain actions, as described in the California Environmental Quality Act (CEQA). One of the primary authors of the act is Lynton K. Caldwell."
```

### Splits

We can split the original string into several components by specifying which particular character or set of characters we wish to use to break it apart.

As we start working with increasingly more complicated string operations, I like to use a higher-level library (part of `tidyverse`) called `stringr`. If you do not have this library already installed, you can install it using `install.packages("stringr")`.

```{r}
library( stringr )
```

Here is an example using the space character to pull it apart into words.

```{r}
str_split( corpus, pattern=" ", simplify=TRUE)
```

which shows `r length(str_split( corpus, pattern=" ", simplify=TRUE))` words in the text.

I need to point out that I added the `simplify=TRUE` option to `str_split`. Had I not done that, it would have returned a `list` object that contained the individual vector of words. There are various reasons that it returns a list, none of which I can frankly understand, that is just the way the authors of the function made it.

### Substrings

There are two different things you may want to do with substrings; find them and replace them. Here are some ways to figure out where they are.

```{r}
str_detect(corpus, "Environment")
```

```{r}
str_count( corpus, "Environment")
```

```{r}
str_locate_all( corpus, "Environment")
```

We can also replace instances of one substring with another.

```{r}
str_replace_all(corpus, "California", "Virginia")
```

There is a lot more fun stuff to do with string based data.

## Logical Data

Logical data consists of two **mutually exclusive** states: `TRUE` or `FALSE`

 

```{r}
dyer_has_good_jokes <- TRUE
dyer_has_good_jokes
```

### Operators on Logical Types

There are 3 primary logical operators that can be used on logical types; one unary and two binary.

 

#### Unary Operator

The `negation` operator

```{r}
!dyer_has_good_jokes
```

 

### The Binary Operators

#### The OR operator

```{r}
TRUE | FALSE
```

#### The AND operator

```{r}
TRUE & FALSE
```

### Introspection

`Logical` types have an introspection operator.

 

```{r}
is.logical( dyer_has_good_jokes )
```

Coercion of something else to a `Logical` is more case-specific.

From `character` data.

```{r}
as.logical( "TRUE" )
```

 

```{r}
as.logical( "FALSE" )
```

Other `character` types result in `NA` (missing data).

```{r}
as.logical( "Bob" )
```

### Coercion

Coercion of something else to a `Logical` is more case-specific.

 

From `numeric` data:\
- Values of `0` are `FALSE`\
- Non-zero values are `TRUE`

```{r}
as.logical(0)
```

```{r}
as.logical( 323 )
```

## Dates

> Time is the next dimension.

This topic covers the basics of how we put together data based upon date and time objects. For this, we will use the following data frame with a single column of data representing dates as they are written in the US.

These are several challenges associated with working with date and time objects. To those of us who are reading this with a background of how US time and date formats are read, we can easily interpret data objects as Month/Day/Year formats (e.g., "2/14/2018"), and is commonly represented in the kind of input data we work in `R` with as a string of characters. Dates and times are sticky things in data analysis because they do not work the way we think they should. Here are some wrinkles:

1.  There are many types of calendars, we use the Julian calendar. However, there are many other calendars that are in use that we may run into. Each of these calendars has a different starting year (e.g., in the Assyrian calendar it is year 6770, it is 4718 in the Chinese calendar, 2020 in the Gregorian, and 1442 in the Islamic calendar).
2.  Western calendar has leap years (+1 day in February) as well as leap seconds because it is based on the rotation around the sun, others are based upon the lunar cycle and have other corrections.
3.  On this planet, we have 24 different time zones. Some states (looking at you Arizona) don't feel it necessary to follow the other states around so they may be the same as PST some of the year and the same as MST the rest of the year. The provence of Newfoundland decided to be half-way between time zones so they are GMT-2:30. Some states have more than one time zone even if they are not large in size (hello Indiana).
4.  Dates and time are made up of odd units, 60-seconds a minute, 60-minutes an hour, 24-hours a day, 7-days a week, 2-weeks a fortnight, 28,29,30,or 31-days in a month, 365 or 366 days in a year, 100 years in a century, etc.

Fortunately, some smart programmers have figured this out for us already. What they did is made the second as the base unit of time and designated 00:00:00 on 1 January 1970 as the *unix epoch*. Time on most modern computers is measured from that starting point. It is much easier to measure the difference between two points in time using the seconds since unix epich *and then* translate it into one or more of these calendars than to deal with all the different calendars each time. So under the hood, much of the date and time issues are kept in terms of epoch seconds.

```{r}
unclass( Sys.time() )
```

### Basic Date Objects

`R` has some basic date functionality built into it. One of the easiest ways to get a date object created is to specify the a date as a character string and then coerce it into a data object. By default, this requires us to represent the date objects as "YEAR-MONTH-DAY" with padding `0` values for any integer of month or date below 9 (e.g., must be two-digits).

So for example, we can specify a date object as:

```{r}
class_start <- as.Date("2021-01-15")
class_start
```

And it is of type:

```{r}
class( class_start )
```

If you want to make a date from a different format, you need to specify what elements within the string representation using format codes. These codes (and many more) can be found by looking at `?strptime`.

```{r}
class_end <- as.Date( "5/10/21", format = "%m/%d/%y")
class_end
```

I like to use some higher-level date functions from the `lubridate` library. If you don't have it installed, do so using the normal approach.

```{r}
library( lubridate )
```

Date objects can be put into vectors and sequences just like other objects.

```{r}
semester <- seq( class_start, class_end, by = "1 day")
semester
```

Some helpful functions include the Julian Ordinal Day (e.g., number of days since the start of the year).

```{r}
ordinal_day <- yday( semester[102] )
ordinal_day
```

The weekday as an integer (0-6 starting on Sunday), which I use to index the named values.

```{r}
days_of_week <- c("Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
x <- wday( semester[32] )
days_of_week[ x ]
```

Since we did not specify a time, things like `hour()` and `minute()` do not provide any usable information.

### Dates & Times

To add time to the date objects, we need to specify both date and time specifically. Here are some example data:

```{r}
df <- data.frame( Date = c("8/21/2004 7:33:51 AM",
                           "7/12/2008 9:23:08 PM",
                           "2/14/2010 8:18:30 AM",
                           "12/23/2018 11:11:45 PM",
                           "2/1/2019 4:42:00 PM",
                           "5/17/2012 1:23:23 AM",
                           "12/11/2020 9:48:02 PM") )
summary( df )
```

Just like above, if we want to turn these into date and time objects we must be able to tell the parsing algorithm what elements are represented in each entry. There are many ways to make dates and time, 10/14 or 14 Oct or October 14 or Julian day 287, etc. These are designated by a format string were we indicate what element represents a *day* or *month* or *year* or *hour* or *minute* or *second*, etc. These are found by looking at the documentation for`?strptime`.

In our case, we have:\
- Month as 1 or 2 digits\
- Day as 1 or 2 digits\
- Year as 4 digits\
- a space to separate date from time\
- hour (not 24-hour though)\
- minutes in 2 digits\
- seconds in 2 digits\
- a space to separate time from timezone\
- timezone\
- `/` separating date objects\
- `:` separating time objects

To make the format string, we need to look up how to encode these items. The items in `df` for a date & time object such as `r df$Date[5]` have the format string:

```{r}
format <- "%m/%d/%Y %I:%M:%S %p"
```

Now, we can convert the character string in the data frame to a date and time object.

### Lubridate

Instead of using the built-in `as.Date()` functionality, I like the `lubridate` library[^1] as it has a lot of additional functionality that we'll play with a bit later.

[^1]: If you get an error saying something like, "there is no package named lubridate" then use `install.packages("lubridate")` and install it. You only need to do this once.

```{r}
df$Date <- parse_date_time( df$Date, 
                            orders=format, 
                            tz = "EST" )
summary( df )
class( df$Date )
```

Now, we can ask *Date-like* questions about the data such as what day of the week was the first sample taken?

```{r warning=FALSE }
weekdays( df$Date[1] )
```

What is the range of dates?

```{r}
range( df$Date )
```

What is the median of samples

```{r}
median( df$Date )
```

and what julian ordinal day (e.g., how many days since start of the year) is the last record.

```{r}
yday( df$Date[4] )
```

Just for fun, I'll add a column to the data that has weekday.

```{r}
df$Weekday <- weekdays( df$Date )
df
```

However, we should probably turn it into a factor (e.g., a data type with pre-defined levels---and for us here---an intrinsic order of the levels).

```{r}
df$Weekday <- factor( df$Weekday, 
                        ordered = TRUE, 
                        levels = days_of_week
                        )
summary( df$Weekday )
```

### Filtering on Date Objects

We can easily filter the content within a `data.frame` using some helper functions such as `hour()`, `minute()`, `weekday()`, etc. Here are some examples including pulling out the weekends.

```{r}
weekends <- df[ df$Weekday %in% c("Saturday","Sunday"), ]
weekends
```

finding items that are in the past (paste being defined as the last time this document was knit).

```{r}
past <- df$Date[ df$Date < Sys.time() ]
past
```

Items that are during working hours

```{r}
work <- df$Date[ hour(df$Date) >= 9 & hour(df$Date) <= 17 ]
work
```

And total range of values in days using normal arithmatic operations such as the minus operator.

```{r}
max(df$Date) - min(df$Date)
```

## Questions

If you have any questions for me specifically on this topic, please post as an Issue in your repository, otherwise consider posting to the discussion board on [Canvas](https://canvas.vcu.edu).
