---
title: "Narrative Title"
format: html
description: |
  The ability to quickly and easily manipulate and rework data is the base foundation for all the work you will be doing in `R`.  There is no more fundamental (and important) skill required than being able to quickly and easily take raw data and reconfigure it properly for inclusion into an analysis, summary, graphic, or table.  Using features of the `tidyverse` library are key.
---

## The Tidyverse Approach

This is the first introduction to tidyverse and is the key skill necessary to become proficient at data analysis.

```{r}
library( tidyverse )
library( lubridate )
```

### The Data

For this topic we will use some example data from the [Rice Rivers Center](https://ricerivers.vcu.edu). These data represent both atmospheric and water data collected from instrumentation on-site. I have stored these data in a spreadsheet that is shared on Google Drive as a CSV file.

```{r}
url <- "https://docs.google.com/spreadsheets/d/1Mk1YGH9LqjF7drJE-td1G_JkdADOU0eMlrP01WFBT8s/pub?gid=0&single=true&output=csv"
rice <- read_csv( url )
summary( rice )
```

These data represent measurements taken every 15 minutes, 24 hours a day, 7 days a week, 365 days a year. For brevity, this file contains measurements starting at `r rice$DateTime[1]` and ending at `r rev(rice$DateTime)[1]` (only `r nrow(rice)` records here...).

If you look at the summary of the data above, you will see several things, including:

-   Date and time objects are `character`
-   Some measurements are in Standard and some in Imperial with units in the same file include both °F and °C, as well as measurements in meters, feet, and inches. In fact, there are duplication of data columns in different units (guess what kind of correlation they might have...)

## Verbs of Analysis

When we perform any type of data manipulation, we use specific verbs. There is a limited lexicon for us to use, but the key here is how we perform these actions, and in which order they are deployed for a huge diversity in outcomes. For now, these basic verbs include:

-   *Select:* Used to grab or reorder columns of data.
-   *Filter:* Used to grab subsets of records (rows) based upon some criteria.
-   *Mutate:* Create new columns of data based upon manipulations of existing columns.
-   *Arrange:* Order the records (rows) based upon some criteria.
-   *Group:* Gather records together to perform operations on chunks of them similar to `by()`.
-   *Summarize:* Extract summaries of data (or grouped data) based upon some defined criteria.

In the following examples, we'll be using the rice data above. For each verb, I'm going to use the pipe operator (`%>%`) to send the data into the example functions and then assign the result to a dummy `data.frame` named `df`. The arguments passed to each of the verbs are where the magic happens.

### The Output

The key to these activities is that every one of these functions takes a `data.frame` as input, does its operations on it, then return a `data.frame` object as output. The `data.frame` is the core data container for all of these actions.

### Select Operator

The `select()` function allows you to choose which columns of data to work with.

```{r}
rice %>%
  select( DateTime, AirTempF ) -> df 
head(df)
```

Select can also be used to reorder the columns in a `data.frame` object. Here are the names of the data columns as initially loaded.

```{r}
names( rice )
```

Let's say that you wanted to reorder the columns as `RecordID`, `ODO_mgl` and `PH` as the first three columns and leave everything else as is. There is this cool function `everthying()` that helps out.

```{r}
rice %>%
  select( RecordID, ODO_mgl, PH, everything() ) -> df
names( df )
```

### Filter

The function `filter()` works to select records (rows) based upon some criteria. So for example, if I am interested in just records when the airtemp was freezing (and the raw data are in °F). The range of values in the original data was:

```{r}
range( rice$AirTempF )
```

but after filtering using the name of the variable and a logical operator.

```{r}
rice %>%
  filter( AirTempF < 32 ) -> df
range( df$AirTempF )
```

Just like `select()`, it is possible to have several conditions, that are compounded (using a logical `AND` operator) by adding them to the `filter()` function. Here I also split the conditionals requiring the data to be above freezing air temperatures, not missing data from the PH meter, and water turbidity \< 15 ntu's. I also put each of these onto their own lines and auto-indent does a great job of making it reasonably readable.

```{r}
rice %>%
  filter( AirTempF > 32, 
          !is.na(PH), 
          Turbidity_ntu < 15) -> df
nrow(df)
```

### Mutate

The `mutate()` function changes values in the table and is quite versatile. Here I will jump back to our old friend `mdy_hms()` from `lubridate` and convert the `DateTime` column, which is

```{r}
class( rice$DateTime )
```

and convert it into a real date and time object

```{r}
rice %>%
  mutate( Date = mdy_hms(DateTime, tz = "EST") ) -> df
class( df$Date )
summary( df$Date )
```

You can also create several mutations in one mutation step.

```{r}
rice %>%
  mutate( Date = mdy_hms(DateTime, tz = "EST"), 
          Month = month(Date, label = TRUE) ) -> df
summary( df$Month )
```

### Arrange

We can sort entire `data.frame` objects based upon the values in one or more of the columns using the `arrange()` function.

```{r}
rice %>%
  arrange( WindSpeed_mph ) -> df 
df$WindSpeed_mph[1]
```

By default, it is in ascending order, to reverse it, use the negative operator on the column name object in the function.

```{r}
rice %>%
  arrange( -WindSpeed_mph ) -> df 
df$WindSpeed_mph[1]
```

As above, it is possible to combine many columns of data as criteria for sorting by adding more arguments to the function call.

```{r}
rice %>%
  arrange( -WindSpeed_mph, WindDir ) -> df
```

### Summarise

This function is the first one that does not return some version of the original data that was passed to it. Rather, this performs operations on the data and makes a brand new data.frame object.

Each argument you give to the function performs one or more operations on the data and returns a brand new `data.frame` object with only the the values specified.

Here is an example where I am taking the mean air and water temperature (n.b., one is in °F and the other is in °C). Notice the result is a new `data.frame` object with one row and two new columns defined by how I asked for the summary in the first place. I used single tick notation so I can have a space in the column names.

```{r}
rice %>%
  summarize( `Air Temp` = mean( AirTempF), 
             `Water Temp` = mean(H2O_TempC, na.rm=TRUE))
```

### Group & Summarize

To get more than one row in the resulting `data.frame` from `summary()`, we need to group the data in some way. The function `group_by()` does this and is used prior to `summary()`. Let's take a look at how we can get the average air and water temp by month. To do this, I'm going to have to do several steps. I'm just going to chain them together using the `%>%` operator.

```{r}
rice %>%
  mutate( Date = mdy_hms( DateTime, 
                          tz="EST"),
          Month = month( Date, 
                         abbr = FALSE, 
                         label=TRUE) ) %>%
  group_by( Month ) %>%
  summarize( `Air Temp` = mean( AirTempF), 
             `Water Temp` = mean( H2O_TempC, 
                                  na.rm=TRUE) )
```

As you read the code, notice how easy it is to understand what is going on because of both the pipes **and** because of the way I am formatting the code itself.

## Flows

This last part really showed off the process of multi-step data manipulations using the pipe operator and the several verbs we introduced. These are both efficient in terms of typing as well as efficient in the way of producing research that makes sense to look at.

Here are some strategies that I use when building up these manipulation workflows.

1.  Do not think that you have to do the whole thing at once. I typically build up the workflow, one line at a time. Make sure the output from the previous line is what you think it should be then add the next one.

2.  Keep your code open and airy, it makes it easier to read and to catch any logical errors that may arrise.

3.  You can pipe into a lot of different functions. In fact, any function that takes a data frame can be the recipient of a pipe. While developing a workflow, I will often pipe into things like `head()`, `summary()`, or `View()` to take a look at what is coming out of my workflow to make sure it resembles what I think it should look like.

## Questions

If you have any questions for me specifically on this topic, please post as an Issue in your repository, otherwise consider posting to the discussion board on [Canvas](https://canvas.vcu.edu).
